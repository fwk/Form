<?php

namespace Fwk\Form;

class TestElement extends AbstractElement
{
}

class TestSanitizer implements Sanitizer
{
    public function sanitize($value)
    {
        return strrev($value);
    }
}

/**
 * Test class for Form.
 * Generated by PHPUnit on 2012-10-11 at 10:56:34.
 */
class ElementsTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var TestElement
     */
    protected $object;

    public function setUp()
    {
        $this->object = new TestElement('test');
    }

    public function testLabel()
    {
        $this->assertFalse($this->object->hasLabel());
        $this->object->label("test label");
        $this->assertTrue($this->object->hasLabel());
        $this->assertEquals("test label", $this->object->getLabel());
    }

    public function testHint()
    {
        $this->assertFalse($this->object->hasHint());
        $this->object->hint("test hint");
        $this->assertTrue($this->object->hasHint());
        $this->assertEquals("test hint", $this->object->getHint());
    }

    public function testValues()
    {
        $this->assertFalse($this->object->hasValue());
        $this->object->setValue("test value");
        $this->assertTrue($this->object->hasValue());
        $this->assertEquals("test value", $this->object->value());
        $this->assertEquals("test value", $this->object->valueOrDefault());
    }

    public function testDefaultValues()
    {
        $this->assertFalse($this->object->hasDefault());
        $this->object->setDefault("test value");
        $this->assertTrue($this->object->hasDefault());
        $this->assertEquals("test value", $this->object->getDefault());
        $this->assertEquals("test value", $this->object->valueOrDefault());

        $this->object->setValue("value");
        $this->assertEquals("value", $this->object->valueOrDefault());
    }

    public function testBasicValidation()
    {
        $this->object->filter(new Validation\NotEmptyFilter(), 'empty');
        $this->assertFalse($this->object->validate());
        $this->assertTrue($this->object->hasError());
        $this->assertEquals("empty", $this->object->getError());

        $this->object->setValue("test");
        $this->assertTrue($this->object->validate());
    }

    public function testSanitization()
    {
        $this->object->sanitizer(new TestSanitizer());
        $this->object->setValue("desrever");
        $this->assertEquals("reversed", $this->object->value());
    }
}