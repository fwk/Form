<?php

namespace Fwk\Form;

/**
 * Test class for Form.
 * Generated by PHPUnit on 2012-10-11 at 10:56:34.
 */
class FormTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Form
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Form;
    }

    /**
     */
    public function testFormOptions()
    {
        $this->object->set('test', 'existing');
        $this->assertFalse($this->object->get('nonExisting'));
        $this->assertEquals('existing', $this->object->get('test'));
        $this->assertEquals('default', $this->object->get('nonExists', 'default'));
        $this->assertTrue(is_array($this->object->getAll()));
        $this->assertEquals(1, count($this->object->getAll()));

        $this->object->setAll(array(
           'test'   => 'merged',
           'second' => 'test'
        ));
        $this->assertEquals(2, count($this->object->getAll()));
        $this->assertEquals('merged', $this->object->get('test'));
    }

    public function testFormAttributes()
    {
        $this->assertEquals(Form::METHOD_POST, $this->object->getMethod());
        $this->object->setMethod(Form::METHOD_GET);
        $this->assertEquals(Form::METHOD_GET, $this->object->getMethod());

        $this->assertEquals(null, $this->object->getAction());
        $this->object->setAction('/some/url');
        $this->assertEquals('/some/url', $this->object->getAction());

        $this->assertFalse($this->object->isMultipart());
        $this->object->setMultipart(true);
        $this->assertTrue($this->object->isMultipart());

        $this->assertInstanceOf('\ArrayIterator', $this->object->getIterator());
    }

    public function testFormElementsMoves()
    {
        $this->assertTrue(is_array($this->object->elements()));
        $this->assertFalse($this->object->has('test'));

        $element = new Elements\Text('test');
        $element2 = new Elements\Text('test2');
        $this->object->add($element);
        $this->object->add($element2);
        $this->assertTrue($this->object->has('test'));

        $this->assertEquals($element, $this->object->element('test'));

        $this->object->remove('test');
        $this->assertFalse($this->object->has('test'));
        $this->assertEquals(1, count($this->object->elements()));

        $this->object->addAll(array(
            new Elements\Text('test2'),
            new Elements\Text('test3')
        ));

        $this->setExpectedException('Fwk\Form\Exceptions\UnknownElementException');
        $this->object->element('nonExistant');
    }
}
